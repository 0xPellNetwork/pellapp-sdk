// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/pelldvs/pellapp-sdk/pelldvs/dvs_post_process_validated.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestPostRequestValidatedData struct {
	Data                         []byte                  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Error                        string                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Hash                         []byte                  `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	NonSignersPubkeysG1          [][]byte                `protobuf:"bytes,4,rep,name=non_signers_pubkeys_g1,json=nonSignersPubkeysG1,proto3" json:"non_signers_pubkeys_g1,omitempty"`
	QuorumApksG1                 [][]byte                `protobuf:"bytes,5,rep,name=quorum_apks_g1,json=quorumApksG1,proto3" json:"quorum_apks_g1,omitempty"`
	SignersApkG2                 []byte                  `protobuf:"bytes,6,opt,name=signers_apk_g2,json=signersApkG2,proto3" json:"signers_apk_g2,omitempty"`
	SignersAggSigG1              []byte                  `protobuf:"bytes,7,opt,name=signers_agg_sig_g1,json=signersAggSigG1,proto3" json:"signers_agg_sig_g1,omitempty"`
	NonSignerQuorumBitmapIndices []uint32                `protobuf:"varint,8,rep,packed,name=non_signer_quorum_bitmap_indices,json=nonSignerQuorumBitmapIndices,proto3" json:"non_signer_quorum_bitmap_indices,omitempty"`
	QuorumApkIndices             []uint32                `protobuf:"varint,9,rep,packed,name=quorum_apk_indices,json=quorumApkIndices,proto3" json:"quorum_apk_indices,omitempty"`
	TotalStakeIndices            []uint32                `protobuf:"varint,10,rep,packed,name=total_stake_indices,json=totalStakeIndices,proto3" json:"total_stake_indices,omitempty"`
	NonSignerStakeIndices        []*NonSignerStakeIndice `protobuf:"bytes,11,rep,name=non_signer_stake_indices,json=nonSignerStakeIndices,proto3" json:"non_signer_stake_indices,omitempty"`
}

func (m *RequestPostRequestValidatedData) Reset()         { *m = RequestPostRequestValidatedData{} }
func (m *RequestPostRequestValidatedData) String() string { return proto.CompactTextString(m) }
func (*RequestPostRequestValidatedData) ProtoMessage()    {}
func (*RequestPostRequestValidatedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_239760bf9b09d83f, []int{0}
}
func (m *RequestPostRequestValidatedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPostRequestValidatedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPostRequestValidatedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPostRequestValidatedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPostRequestValidatedData.Merge(m, src)
}
func (m *RequestPostRequestValidatedData) XXX_Size() int {
	return m.Size()
}
func (m *RequestPostRequestValidatedData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPostRequestValidatedData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPostRequestValidatedData proto.InternalMessageInfo

func (m *RequestPostRequestValidatedData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RequestPostRequestValidatedData) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetNonSignersPubkeysG1() [][]byte {
	if m != nil {
		return m.NonSignersPubkeysG1
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetQuorumApksG1() [][]byte {
	if m != nil {
		return m.QuorumApksG1
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetSignersApkG2() []byte {
	if m != nil {
		return m.SignersApkG2
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetSignersAggSigG1() []byte {
	if m != nil {
		return m.SignersAggSigG1
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetNonSignerQuorumBitmapIndices() []uint32 {
	if m != nil {
		return m.NonSignerQuorumBitmapIndices
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetQuorumApkIndices() []uint32 {
	if m != nil {
		return m.QuorumApkIndices
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetTotalStakeIndices() []uint32 {
	if m != nil {
		return m.TotalStakeIndices
	}
	return nil
}

func (m *RequestPostRequestValidatedData) GetNonSignerStakeIndices() []*NonSignerStakeIndice {
	if m != nil {
		return m.NonSignerStakeIndices
	}
	return nil
}

type NonSignerStakeIndice struct {
	NonSignerStakeIndice []uint32 `protobuf:"varint,1,rep,packed,name=non_signer_stake_indice,json=nonSignerStakeIndice,proto3" json:"non_signer_stake_indice,omitempty"`
}

func (m *NonSignerStakeIndice) Reset()         { *m = NonSignerStakeIndice{} }
func (m *NonSignerStakeIndice) String() string { return proto.CompactTextString(m) }
func (*NonSignerStakeIndice) ProtoMessage()    {}
func (*NonSignerStakeIndice) Descriptor() ([]byte, []int) {
	return fileDescriptor_239760bf9b09d83f, []int{1}
}
func (m *NonSignerStakeIndice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonSignerStakeIndice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonSignerStakeIndice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonSignerStakeIndice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonSignerStakeIndice.Merge(m, src)
}
func (m *NonSignerStakeIndice) XXX_Size() int {
	return m.Size()
}
func (m *NonSignerStakeIndice) XXX_DiscardUnknown() {
	xxx_messageInfo_NonSignerStakeIndice.DiscardUnknown(m)
}

var xxx_messageInfo_NonSignerStakeIndice proto.InternalMessageInfo

func (m *NonSignerStakeIndice) GetNonSignerStakeIndice() []uint32 {
	if m != nil {
		return m.NonSignerStakeIndice
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestPostRequestValidatedData)(nil), "intellix.pelldvs.RequestPostRequestValidatedData")
	proto.RegisterType((*NonSignerStakeIndice)(nil), "intellix.pelldvs.NonSignerStakeIndice")
}

func init() {
	proto.RegisterFile("github.com/pelldvs/pellapp-sdk/pelldvs/dvs_post_process_validated.proto", fileDescriptor_239760bf9b09d83f)
}

var fileDescriptor_239760bf9b09d83f = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x17, 0xda, 0x0d, 0xe6, 0x15, 0xd8, 0xbc, 0xc2, 0x42, 0x85, 0x42, 0x34, 0x10, 0xaa,
	0xf8, 0x93, 0x28, 0x1d, 0x5c, 0xb8, 0x6d, 0x20, 0x2a, 0x0e, 0x43, 0x23, 0x95, 0x38, 0x70, 0xb1,
	0xdc, 0xc6, 0xf2, 0xa2, 0xa4, 0xb1, 0x97, 0xd7, 0x8d, 0xd8, 0x57, 0xe0, 0xc4, 0x47, 0xe1, 0xc0,
	0x87, 0x40, 0x9c, 0x76, 0x84, 0x1b, 0x6a, 0x0f, 0x7c, 0x0d, 0x14, 0x3b, 0x49, 0x07, 0x2a, 0x97,
	0xf6, 0xf5, 0xfb, 0xfc, 0x5e, 0xfb, 0x79, 0xa5, 0x27, 0x28, 0x88, 0x33, 0xc5, 0xd2, 0x34, 0xfe,
	0xe8, 0x4b, 0x96, 0xa6, 0x51, 0x01, 0x7e, 0x54, 0x00, 0x91, 0x02, 0x14, 0x91, 0xb9, 0x98, 0x30,
	0x00, 0x52, 0xd0, 0x34, 0x8e, 0xa8, 0x62, 0x91, 0x27, 0x73, 0xa1, 0x04, 0xde, 0xae, 0x47, 0xbc,
	0x6a, 0xa4, 0xd7, 0xe5, 0x82, 0x0b, 0x2d, 0xfa, 0x65, 0x65, 0xb8, 0xde, 0xde, 0x44, 0xc0, 0x54,
	0x80, 0x3f, 0x05, 0xee, 0x17, 0x41, 0xf9, 0x57, 0x09, 0x77, 0x8c, 0x40, 0xcc, 0x84, 0x39, 0x54,
	0xd2, 0x0e, 0x9d, 0xc6, 0x99, 0xf0, 0xf5, 0xaf, 0x69, 0xed, 0xff, 0x6c, 0xa3, 0x7b, 0x21, 0x3b,
	0x9b, 0x31, 0x50, 0x27, 0x02, 0x54, 0x55, 0xbe, 0xaf, 0x4d, 0xbd, 0xa2, 0x8a, 0x62, 0x8c, 0xda,
	0x11, 0x55, 0xd4, 0xb6, 0x5c, 0xab, 0xdf, 0x09, 0x75, 0x8d, 0xbb, 0x68, 0x9d, 0xe5, 0xb9, 0xc8,
	0xed, 0x2b, 0xae, 0xd5, 0xdf, 0x0c, 0xcd, 0xa1, 0x24, 0x4f, 0x29, 0x9c, 0xda, 0x2d, 0x43, 0x96,
	0x35, 0x3e, 0x40, 0xb7, 0x33, 0x91, 0x11, 0x88, 0x79, 0xc6, 0x72, 0x20, 0x72, 0x36, 0x4e, 0xd8,
	0x39, 0x10, 0x1e, 0xd8, 0x6d, 0xb7, 0xd5, 0xef, 0x84, 0xbb, 0x99, 0xc8, 0x46, 0x46, 0x3c, 0x31,
	0xda, 0x30, 0xc0, 0x0f, 0xd0, 0x8d, 0xb3, 0x99, 0xc8, 0x67, 0x53, 0x42, 0x65, 0xa2, 0xe1, 0x75,
	0x0d, 0x77, 0x4c, 0xf7, 0x50, 0x26, 0x15, 0x55, 0x5f, 0x4b, 0x65, 0x42, 0xf8, 0xc0, 0xde, 0xd0,
	0x0f, 0x77, 0xaa, 0xee, 0xa1, 0x4c, 0x86, 0x03, 0xfc, 0x18, 0xe1, 0x86, 0xe2, 0xbc, 0x34, 0x52,
	0xde, 0x77, 0x55, 0x93, 0x37, 0x6b, 0x92, 0xf3, 0x51, 0xcc, 0x87, 0x01, 0x7e, 0x8d, 0xdc, 0xa5,
	0x5b, 0x52, 0x79, 0x18, 0xc7, 0x6a, 0x4a, 0x25, 0x89, 0xb3, 0x28, 0x9e, 0x30, 0xb0, 0xaf, 0xb9,
	0xad, 0xfe, 0xf5, 0xf0, 0x6e, 0xe3, 0xfb, 0x9d, 0xa6, 0x8e, 0x34, 0xf4, 0xc6, 0x30, 0xf8, 0x09,
	0xc2, 0xcb, 0x05, 0x9a, 0xc9, 0x4d, 0x3d, 0xb9, 0xdd, 0x2c, 0x51, 0xd3, 0x1e, 0xda, 0x55, 0x42,
	0xd1, 0x94, 0x80, 0xa2, 0x09, 0x6b, 0x70, 0xa4, 0xf1, 0x1d, 0x2d, 0x8d, 0x4a, 0xa5, 0xe6, 0x09,
	0xb2, 0x2f, 0xb9, 0xfc, 0x7b, 0x68, 0xcb, 0x6d, 0xf5, 0xb7, 0x06, 0x0f, 0xbd, 0x7f, 0x73, 0xe4,
	0xbd, 0xad, 0xfd, 0x5e, 0xba, 0x2a, 0xbc, 0x95, 0xad, 0xe8, 0xc2, 0x8b, 0x97, 0xdf, 0xbf, 0x3e,
	0xad, 0x12, 0xe6, 0x8d, 0x29, 0x30, 0xaf, 0x08, 0xc6, 0x4c, 0xd1, 0xc0, 0x3b, 0x06, 0xfe, 0xe9,
	0xf7, 0x97, 0x47, 0xf7, 0x9b, 0x60, 0x97, 0xa1, 0xd6, 0x81, 0xce, 0x4d, 0x74, 0x96, 0x81, 0xde,
	0x3f, 0x46, 0xdd, 0x55, 0x6f, 0xe2, 0xe7, 0x68, 0xef, 0x3f, 0xee, 0x6d, 0x4b, 0x6f, 0xdc, 0x5d,
	0x65, 0xea, 0xe8, 0xd9, 0xb7, 0xb9, 0x63, 0x5d, 0xcc, 0x1d, 0xeb, 0xd7, 0xdc, 0xb1, 0x3e, 0x2f,
	0x9c, 0xb5, 0x8b, 0x85, 0xb3, 0xf6, 0x63, 0xe1, 0xac, 0x7d, 0xe8, 0x35, 0x6e, 0x20, 0x4a, 0x9a,
	0x4f, 0x4d, 0x9d, 0x4b, 0x06, 0xe3, 0x0d, 0x9d, 0xf3, 0x83, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x1e, 0x72, 0x78, 0x5d, 0x8b, 0x03, 0x00, 0x00,
}

func (m *RequestPostRequestValidatedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPostRequestValidatedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPostRequestValidatedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonSignerStakeIndices) > 0 {
		for iNdEx := len(m.NonSignerStakeIndices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonSignerStakeIndices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TotalStakeIndices) > 0 {
		dAtA2 := make([]byte, len(m.TotalStakeIndices)*10)
		var j1 int
		for _, num := range m.TotalStakeIndices {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x52
	}
	if len(m.QuorumApkIndices) > 0 {
		dAtA4 := make([]byte, len(m.QuorumApkIndices)*10)
		var j3 int
		for _, num := range m.QuorumApkIndices {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NonSignerQuorumBitmapIndices) > 0 {
		dAtA6 := make([]byte, len(m.NonSignerQuorumBitmapIndices)*10)
		var j5 int
		for _, num := range m.NonSignerQuorumBitmapIndices {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SignersAggSigG1) > 0 {
		i -= len(m.SignersAggSigG1)
		copy(dAtA[i:], m.SignersAggSigG1)
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.SignersAggSigG1)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SignersApkG2) > 0 {
		i -= len(m.SignersApkG2)
		copy(dAtA[i:], m.SignersApkG2)
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.SignersApkG2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QuorumApksG1) > 0 {
		for iNdEx := len(m.QuorumApksG1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuorumApksG1[iNdEx])
			copy(dAtA[i:], m.QuorumApksG1[iNdEx])
			i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.QuorumApksG1[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NonSignersPubkeysG1) > 0 {
		for iNdEx := len(m.NonSignersPubkeysG1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NonSignersPubkeysG1[iNdEx])
			copy(dAtA[i:], m.NonSignersPubkeysG1[iNdEx])
			i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.NonSignersPubkeysG1[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NonSignerStakeIndice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonSignerStakeIndice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonSignerStakeIndice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonSignerStakeIndice) > 0 {
		dAtA8 := make([]byte, len(m.NonSignerStakeIndice)*10)
		var j7 int
		for _, num := range m.NonSignerStakeIndice {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintDvsPostProcessValidated(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDvsPostProcessValidated(dAtA []byte, offset int, v uint64) int {
	offset -= sovDvsPostProcessValidated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestPostRequestValidatedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDvsPostProcessValidated(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovDvsPostProcessValidated(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovDvsPostProcessValidated(uint64(l))
	}
	if len(m.NonSignersPubkeysG1) > 0 {
		for _, b := range m.NonSignersPubkeysG1 {
			l = len(b)
			n += 1 + l + sovDvsPostProcessValidated(uint64(l))
		}
	}
	if len(m.QuorumApksG1) > 0 {
		for _, b := range m.QuorumApksG1 {
			l = len(b)
			n += 1 + l + sovDvsPostProcessValidated(uint64(l))
		}
	}
	l = len(m.SignersApkG2)
	if l > 0 {
		n += 1 + l + sovDvsPostProcessValidated(uint64(l))
	}
	l = len(m.SignersAggSigG1)
	if l > 0 {
		n += 1 + l + sovDvsPostProcessValidated(uint64(l))
	}
	if len(m.NonSignerQuorumBitmapIndices) > 0 {
		l = 0
		for _, e := range m.NonSignerQuorumBitmapIndices {
			l += sovDvsPostProcessValidated(uint64(e))
		}
		n += 1 + sovDvsPostProcessValidated(uint64(l)) + l
	}
	if len(m.QuorumApkIndices) > 0 {
		l = 0
		for _, e := range m.QuorumApkIndices {
			l += sovDvsPostProcessValidated(uint64(e))
		}
		n += 1 + sovDvsPostProcessValidated(uint64(l)) + l
	}
	if len(m.TotalStakeIndices) > 0 {
		l = 0
		for _, e := range m.TotalStakeIndices {
			l += sovDvsPostProcessValidated(uint64(e))
		}
		n += 1 + sovDvsPostProcessValidated(uint64(l)) + l
	}
	if len(m.NonSignerStakeIndices) > 0 {
		for _, e := range m.NonSignerStakeIndices {
			l = e.Size()
			n += 1 + l + sovDvsPostProcessValidated(uint64(l))
		}
	}
	return n
}

func (m *NonSignerStakeIndice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NonSignerStakeIndice) > 0 {
		l = 0
		for _, e := range m.NonSignerStakeIndice {
			l += sovDvsPostProcessValidated(uint64(e))
		}
		n += 1 + sovDvsPostProcessValidated(uint64(l)) + l
	}
	return n
}

func sovDvsPostProcessValidated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDvsPostProcessValidated(x uint64) (n int) {
	return sovDvsPostProcessValidated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestPostRequestValidatedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvsPostProcessValidated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPostRequestValidatedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPostRequestValidatedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSignersPubkeysG1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonSignersPubkeysG1 = append(m.NonSignersPubkeysG1, make([]byte, postIndex-iNdEx))
			copy(m.NonSignersPubkeysG1[len(m.NonSignersPubkeysG1)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumApksG1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumApksG1 = append(m.QuorumApksG1, make([]byte, postIndex-iNdEx))
			copy(m.QuorumApksG1[len(m.QuorumApksG1)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersApkG2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignersApkG2 = append(m.SignersApkG2[:0], dAtA[iNdEx:postIndex]...)
			if m.SignersApkG2 == nil {
				m.SignersApkG2 = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersAggSigG1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignersAggSigG1 = append(m.SignersAggSigG1[:0], dAtA[iNdEx:postIndex]...)
			if m.SignersAggSigG1 == nil {
				m.SignersAggSigG1 = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NonSignerQuorumBitmapIndices = append(m.NonSignerQuorumBitmapIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NonSignerQuorumBitmapIndices) == 0 {
					m.NonSignerQuorumBitmapIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDvsPostProcessValidated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NonSignerQuorumBitmapIndices = append(m.NonSignerQuorumBitmapIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSignerQuorumBitmapIndices", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.QuorumApkIndices = append(m.QuorumApkIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.QuorumApkIndices) == 0 {
					m.QuorumApkIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDvsPostProcessValidated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.QuorumApkIndices = append(m.QuorumApkIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumApkIndices", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TotalStakeIndices = append(m.TotalStakeIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TotalStakeIndices) == 0 {
					m.TotalStakeIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDvsPostProcessValidated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TotalStakeIndices = append(m.TotalStakeIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakeIndices", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSignerStakeIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonSignerStakeIndices = append(m.NonSignerStakeIndices, &NonSignerStakeIndice{})
			if err := m.NonSignerStakeIndices[len(m.NonSignerStakeIndices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDvsPostProcessValidated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NonSignerStakeIndice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDvsPostProcessValidated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonSignerStakeIndice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonSignerStakeIndice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NonSignerStakeIndice = append(m.NonSignerStakeIndice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDvsPostProcessValidated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDvsPostProcessValidated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NonSignerStakeIndice) == 0 {
					m.NonSignerStakeIndice = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDvsPostProcessValidated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NonSignerStakeIndice = append(m.NonSignerStakeIndice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSignerStakeIndice", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDvsPostProcessValidated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDvsPostProcessValidated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDvsPostProcessValidated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDvsPostProcessValidated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDvsPostProcessValidated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDvsPostProcessValidated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDvsPostProcessValidated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDvsPostProcessValidated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDvsPostProcessValidated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDvsPostProcessValidated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDvsPostProcessValidated = fmt.Errorf("proto: unexpected end of group")
)
